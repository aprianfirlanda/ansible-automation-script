---
- name: Install & configure PostgreSQL on Rocky 9
  hosts: all
  become: true
  collections:
    - community.postgresql
  vars:
    pg_packages:
      - postgresql
      - postgresql-server
      - python3-psycopg2  # needed by community.postgresql modules

  tasks:
    - name: Ensure packages present
      ansible.builtin.dnf:
        name: "{{ pg_packages }}"
        state: present

    - name: Initialize database (idempotent)
      ansible.builtin.command: "postgresql-setup --initdb"
      args:
        creates: /var/lib/pgsql/data/PG_VERSION

    - name: Allow remote connections (optional)
      ansible.builtin.lineinfile:
        path: /var/lib/pgsql/data/postgresql.conf
        regexp: "^#?listen_addresses ="
        line: "listen_addresses = '*'"
        backup: yes
      notify: Restart PostgreSQL

    - name: Open pg_hba for md5 (simple example, adjust for your network)
      ansible.builtin.blockinfile:
        path: /var/lib/pgsql/data/pg_hba.conf
        marker: "# {mark} ANSIBLE MANAGED RULES"
        block: |
          host    all             all             0.0.0.0/0               md5
          host    all             all             ::/0                    md5
      notify: Restart PostgreSQL

    - name: Enable & start PostgreSQL
      ansible.builtin.service:
        name: postgresql
        enabled: true
        state: started

    - name: Open port 5432 in firewalld
      ansible.posix.firewalld:
        port: 5432/tcp
        permanent: true
        immediate: true
        state: enabled
      when: ansible_facts.os_family == "RedHat"

    - name: Ensure database exists
      become: true
      become_user: postgres
      community.postgresql.postgresql_db:
        name: "{{ db_name }}"
        state: present

    - name: Ensure application user exists (create role + password)
      become: true
      become_user: postgres
      community.postgresql.postgresql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        role_attr_flags: LOGIN
        state: present

    - name: Grant ALL privileges on the database to the user
      become: true
      become_user: postgres
      community.postgresql.postgresql_query:
        login_db: postgres
        query: "GRANT ALL PRIVILEGES ON DATABASE {{ db_name | quote }} TO {{ db_user | quote }};"

  handlers:
    - name: Restart PostgreSQL
      ansible.builtin.service:
        name: postgresql
        state: restarted
